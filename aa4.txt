section .data
msg1 db "Assignment 4 - Conversion from bcd to hex and vice-versa",10
msg1_len equ $- msg1
msg2 db 10,"------------------------------------------------------------------"
     db 10,"MENU",10
     db "1)BCD to Hex",10
     db "2)Hex to BCD",10
     db "3)Exit",10
msg2_len equ $-msg2
msg3 db "=>> BCD to hex conversion",10
msg3_len equ $- msg3
msg4 db "=>> Hex to BCD conversion",10
msg4_len equ $- msg4
msg5 db "=>> Exit",10
msg5_len equ $- msg5
msg6 db 10,"=>> Enter the option : "
msg6_len equ $- msg6
bmsg db 10,"=>> Enter the 5 digit BCD number : "
bmsg_len equ $- bmsg
ehmsg db 10,"The Hex Number is :"
ehmsg_len equ $-ehmsg
hmsg db	10,"=>> Enter 4 digit Hex number :"
hmsg_len equ $- hmsg
ebmsg db 10,"The Equivalent BCD Number is:"
ebmsg_len equ $- ebmsg
emsg db	10,"INVALID NUMBER INPUT",10
emsg_len equ $- emsg

section .bss
numb resb 2
numblen equ $- numb
buf resb 6
char_ans resB 4
ans resW 1

%macro print 2
mov rax,1
mov rdi,1
mov rsi,%1
mov rdx,%2
syscall
%endmacro

%macro  read  2
mov rax,0
mov rdi,0
mov rsi,%1
mov rdx,%2
syscall
%endmacro

%macro exit 0
mov rax,60
mov rdi,0
syscall
%endmacro

section .text

global _start
_start:
print msg1,msg1_len

MENU:

print msg2,msg2_len
read numb,numblen

mov bl, byte [numb]
cmp bl,'1'
je one
cmp bl,'2'
je two
cmp bl,'3'
je three

one: 
print msg3,msg3_len
jne two
call BCD_HEX
jmp MENU
exit

two: 
print msg4,msg4_len
jne three
call HEX_BCD
jmp MENU
exit

three: 
jne invalid
exit

invalid:
print emsg,emsg_len
jmp MENU
	
BCD_HEX:
print bmsg,bmsg_len
read buf,6		
mov rsi,buf		
xor ax,ax		
mov rbp,5		
mov rbx,10		
	
next:
xor cx,cx		
mul bx		
mov cl,[rsi]
sub cl,30h
add ax,cx
inc rsi		
dec rbp
jnz next
mov [ans],ax	
print ehmsg,ehmsg_len
mov ax,[ans]
call Disp_16			
	
Disp_16:				
MOV RSI,char_ans+3
MOV RCX,4           	
MOV RBX,16			

next_digit:
XOR RDX,RDX
DIV RBX
CMP DL,9	
JBE add30
ADD DL,07H

add30	:
ADD DL,30H
MOV [RSI],DL
DEC RSI
DEC RCX
JNZ next_digit
print char_ans,4
call MENU
exit

HEX_BCD:
print	hmsg,hmsg_len
call	Accept_16		
mov	ax,bx			
mov	bx,10			
xor	bp,bp			
	
back:
xor	dx,dx			
div	bx			
push	dx			
inc	bp			
	
cmp	ax,0			
jne	back			

print	ebmsg,ebmsg_len

back1:
pop	dx			
add	dl,30h			
mov	[char_ans],dl		
print	char_ans,1

dec	bp	
jnz	back1	
jmp MENU

Accept_16:				
read	buf,5
MOV	RCX,4
MOV	RSI,buf
XOR	BX,BX

next_byte:
SHL	BX,4
MOV	AL,[RSI]

CMP	AL,'0'
JB	error
CMP	AL,'9'
JBE	sub30

CMP	AL,'A'
JB	error
CMP	AL,'F'
JBE	sub37
	
CMP	AL,'a'
JB	error
CMP	AL,'f'
JBE	sub57

error:
print 	emsg,emsg_len
exit

sub57:	SUB	AL,20H
sub37:	SUB	AL,07H
sub30:	SUB	AL,30H
	
ADD 	BX,AX
INC	RSI
DEC	RCX
JNZ	next_byte
RET